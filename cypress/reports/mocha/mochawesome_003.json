{
  "stats": {
    "suites": 3,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2021-03-23T08:40:45.511Z",
    "end": "2021-03-23T08:40:50.608Z",
    "duration": 5097,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b94afd1b-e41b-4051-9732-0fe178638d60",
      "title": "",
      "fullFile": "cypress/integration/examples/assertions.spec.js",
      "file": "cypress/integration/examples/assertions.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "db34c91c-a2f3-4a5e-a008-4a13bf69c538",
          "title": "Assertions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a75b55fa-ec74-4d7a-abf4-0820e556dfda",
              "title": "Implicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".should() - make an assertion about the current subject",
                  "fullTitle": "Assertions Implicit Assertions .should() - make an assertion about the current subject",
                  "timedOut": null,
                  "duration": 935,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/should\ncy.get(\".assertion-table\").find(\"tbody tr:last\").should(\"have.class\", \"success\").find(\"td\").first() // checking the text of the <td> element in various ways\n.should(\"have.text\", \"Column content\").should(\"contain\", \"Column content\").should(\"have.html\", \"Column content\") // chai-jquery uses \"is()\" to check if element matches selector\n.should(\"match\", \"td\") // to match text content against a regular expression\n// first need to invoke jQuery method text()\n// and then match using regular expression\n.invoke(\"text\").should(\"match\", /column content/i); // a better way to check element's text content against a regular expression\n// is to use \"cy.contains\"\n// https://on.cypress.io/contains\ncy.get(\".assertion-table\").find(\"tbody tr:last\") // finds first <td> element with text content matching regular expression\n.contains(\"td\", /column content/i).should(\"be.visible\"); // for more information about asserting element's text\n// see https://on.cypress.io/using-cypress-faq#How-do-I-get-an-elementâ€™s-text-contents",
                  "err": {},
                  "uuid": "ab2a9028-ecdf-4ef0-b31d-e808e5920081",
                  "parentUUID": "a75b55fa-ec74-4d7a-abf4-0820e556dfda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": ".and() - chain multiple assertions together",
                  "fullTitle": "Assertions Implicit Assertions .and() - chain multiple assertions together",
                  "timedOut": null,
                  "duration": 236,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/and\ncy.get(\".assertions-link\").should(\"have.class\", \"active\").and(\"have.attr\", \"href\").and(\"include\", \"cypress.io\");",
                  "err": {},
                  "uuid": "9529ed5d-46f2-4092-a991-065ec6c45fb5",
                  "parentUUID": "a75b55fa-ec74-4d7a-abf4-0820e556dfda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab2a9028-ecdf-4ef0-b31d-e808e5920081",
                "9529ed5d-46f2-4092-a991-065ec6c45fb5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1171,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "700c46ba-f763-43bf-a8a9-348c467770c7",
              "title": "Explicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "expect - make an assertion about a specified subject",
                  "fullTitle": "Assertions Explicit Assertions expect - make an assertion about a specified subject",
                  "timedOut": null,
                  "duration": 195,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can use Chai's BDD style assertions\nexpect(true).to.be[\"true\"];\nvar o = {\n  foo: \"bar\"\n};\nexpect(o).to.equal(o);\nexpect(o).to.deep.equal({\n  foo: \"bar\"\n}); // matching text using regular expression\nexpect(\"FooBar\").to.match(/bar$/i);",
                  "err": {},
                  "uuid": "580411fc-2916-4309-8ab3-cfe166dafc43",
                  "parentUUID": "700c46ba-f763-43bf-a8a9-348c467770c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "pass your own callback function to should()",
                  "fullTitle": "Assertions Explicit Assertions pass your own callback function to should()",
                  "timedOut": null,
                  "duration": 118,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Pass a function to should that can have any number\n// of explicit assertions within it.\n// The \".should(cb)\" function will be retried\n// automatically until it passes all your explicit assertions or times out.\ncy.get(\".assertions-p\").find(\"p\").should(function ($p) {\n  // https://on.cypress.io/$\n  // return an array of texts from all of the p's\n  // @ts-ignore TS6133 unused variable\n  var texts = $p.map(function (i, el) {\n    return Cypress.$(el).text();\n  }); // jquery map returns jquery object\n  // and .get() convert this to simple array\n  var paragraphs = texts.get(); // array should have length of 3\n  expect(paragraphs, \"has 3 paragraphs\").to.have.length(3); // use second argument to expect(...) to provide clear\n  // message with each assertion\n  expect(paragraphs, \"has expected text in each paragraph\").to.deep.eq([\"Some text from first p\", \"More text from second p\", \"And even more text from third p\"]);\n});",
                  "err": {},
                  "uuid": "3824fd71-6e50-4b22-b2a4-46d8ff3bcb0b",
                  "parentUUID": "700c46ba-f763-43bf-a8a9-348c467770c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "finds element by class name regex",
                  "fullTitle": "Assertions Explicit Assertions finds element by class name regex",
                  "timedOut": null,
                  "duration": 224,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get(\".docs-header\").find(\"div\") // .should(cb) callback function will be retried\n.should(function ($div) {\n  expect($div).to.have.length(1);\n  var className = $div[0].className;\n  expect(className).to.match(/heading-/);\n}) // .then(cb) callback is not retried,\n// it either passes or fails\n.then(function ($div) {\n  expect($div, \"text content\").to.have.text(\"Introduction\");\n});",
                  "err": {},
                  "uuid": "454215cc-c395-4146-a18a-fe192ef498ed",
                  "parentUUID": "700c46ba-f763-43bf-a8a9-348c467770c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can throw any error",
                  "fullTitle": "Assertions Explicit Assertions can throw any error",
                  "timedOut": null,
                  "duration": 199,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get(\".docs-header\").find(\"div\").should(function ($div) {\n  if ($div.length !== 1) {\n    // you can throw your own errors\n    throw new Error(\"Did not find 1 element\");\n  }\n  var className = $div[0].className;\n  if (!className.match(/heading-/)) {\n    throw new Error(\"Could not find class \\\"heading-\\\" in \".concat(className));\n  }\n});",
                  "err": {},
                  "uuid": "a60f4a07-2a29-4aa5-8f57-580b98b6fa82",
                  "parentUUID": "700c46ba-f763-43bf-a8a9-348c467770c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "matches unknown text between two elements",
                  "fullTitle": "Assertions Explicit Assertions matches unknown text between two elements",
                  "timedOut": null,
                  "duration": 239,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**\n * Text from the first element.\n * @type {string}\n */\nvar text;\n/**\n * Normalizes passed text,\n * useful before comparing text with spaces and different capitalization.\n * @param {string} s Text to normalize\n */\nvar normalizeText = function normalizeText(s) {\n  return s.replace(/\\s/g, \"\").toLowerCase();\n};\ncy.get(\".two-elements\").find(\".first\").then(function ($first) {\n  // save text from the first element\n  text = normalizeText($first.text());\n});\ncy.get(\".two-elements\").find(\".second\").should(function ($div) {\n  // we can massage text before comparing\n  var secondText = normalizeText($div.text());\n  expect(secondText, \"second text\").to.equal(text);\n});",
                  "err": {},
                  "uuid": "a8bc44f0-501b-4387-be47-edca8d673a73",
                  "parentUUID": "700c46ba-f763-43bf-a8a9-348c467770c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "assert - assert shape of an object",
                  "fullTitle": "Assertions Explicit Assertions assert - assert shape of an object",
                  "timedOut": null,
                  "duration": 170,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var person = {\n  name: \"Joe\",\n  age: 20\n};\nassert.isObject(person, \"value is object\");",
                  "err": {},
                  "uuid": "4c2b00a8-b213-4327-a6e2-b95267719ac8",
                  "parentUUID": "700c46ba-f763-43bf-a8a9-348c467770c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retries the should callback until assertions pass",
                  "fullTitle": "Assertions Explicit Assertions retries the should callback until assertions pass",
                  "timedOut": null,
                  "duration": 1617,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get(\"#random-number\").should(function ($div) {\n  var n = parseFloat($div.text());\n  expect(n).to.be.gte(1).and.be.lte(10);\n});",
                  "err": {},
                  "uuid": "2b89ea8d-9375-4992-8b56-4ceca5f10dd9",
                  "parentUUID": "700c46ba-f763-43bf-a8a9-348c467770c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "580411fc-2916-4309-8ab3-cfe166dafc43",
                "3824fd71-6e50-4b22-b2a4-46d8ff3bcb0b",
                "454215cc-c395-4146-a18a-fe192ef498ed",
                "a60f4a07-2a29-4aa5-8f57-580b98b6fa82",
                "a8bc44f0-501b-4387-be47-edca8d673a73",
                "4c2b00a8-b213-4327-a6e2-b95267719ac8",
                "2b89ea8d-9375-4992-8b56-4ceca5f10dd9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2762,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}