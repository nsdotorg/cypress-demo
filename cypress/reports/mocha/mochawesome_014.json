{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2021-03-23T08:20:05.156Z",
    "end": "2021-03-23T08:20:10.230Z",
    "duration": 5074,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "da564997-9159-4895-8f63-b3d2d96c6cbb",
      "title": "",
      "fullFile": "cypress/integration/examples/spies_stubs_clocks.spec.js",
      "file": "cypress/integration/examples/spies_stubs_clocks.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cce381c9-c906-47aa-8cb1-c84f66954322",
          "title": "Spies, Stubs, and Clock",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.spy() - wrap a method in a spy",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() - wrap a method in a spy",
              "timedOut": null,
              "duration": 404,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spy\ncy.visit(\"https://example.cypress.io/commands/spies-stubs-clocks\");\nvar obj = {\n  foo: function foo() {}\n};\nvar spy = cy.spy(obj, \"foo\").as(\"anyArgs\");\nobj.foo();\nexpect(spy).to.be.called;",
              "err": {},
              "uuid": "053f76f5-18c0-4cec-9d40-cab26c540c51",
              "parentUUID": "cce381c9-c906-47aa-8cb1-c84f66954322",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.spy() retries until assertions pass",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() retries until assertions pass",
              "timedOut": null,
              "duration": 2531,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"https://example.cypress.io/commands/spies-stubs-clocks\");\nvar obj = {\n  /**\n   * Prints the argument passed\n   * @param x {any}\n   */\n  foo: function foo(x) {\n    console.log(\"obj.foo called with\", x);\n  }\n};\ncy.spy(obj, \"foo\").as(\"foo\");\nsetTimeout(function () {\n  obj.foo(\"first\");\n}, 500);\nsetTimeout(function () {\n  obj.foo(\"second\");\n}, 2500);\ncy.get(\"@foo\").should(\"have.been.calledTwice\");",
              "err": {},
              "uuid": "65f9593f-f408-4f44-a602-40afd441501f",
              "parentUUID": "cce381c9-c906-47aa-8cb1-c84f66954322",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() - create a stub and/or replace a function with stub",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() - create a stub and/or replace a function with stub",
              "timedOut": null,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/stub\ncy.visit(\"https://example.cypress.io/commands/spies-stubs-clocks\");\nvar obj = {\n  /**\n   * prints both arguments to the console\n   * @param a {string}\n   * @param b {string}\n   */\n  foo: function foo(a, b) {\n    console.log(\"a\", a, \"b\", b);\n  }\n};\nvar stub = cy.stub(obj, \"foo\").as(\"foo\");\nobj.foo(\"foo\", \"bar\");\nexpect(stub).to.be.called;",
              "err": {},
              "uuid": "81614d50-3944-49f5-ad7d-e891b6aa79b0",
              "parentUUID": "cce381c9-c906-47aa-8cb1-c84f66954322",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clock() - control time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.clock() - control time in the browser",
              "timedOut": null,
              "duration": 237,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clock\n// create the date in UTC so its always the same\n// no matter what local timezone the browser is running in\nvar now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit(\"https://example.cypress.io/commands/spies-stubs-clocks\");\ncy.get(\"#clock-div\").click().should(\"have.text\", \"1489449600\");",
              "err": {},
              "uuid": "dda64991-3587-4811-8dad-fda04cb99016",
              "parentUUID": "cce381c9-c906-47aa-8cb1-c84f66954322",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.tick() - move time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.tick() - move time in the browser",
              "timedOut": null,
              "duration": 288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/tick\n// create the date in UTC so its always the same\n// no matter what local timezone the browser is running in\nvar now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit(\"https://example.cypress.io/commands/spies-stubs-clocks\");\ncy.get(\"#tick-div\").click().should(\"have.text\", \"1489449600\");\ncy.tick(10000); // 10 seconds passed\ncy.get(\"#tick-div\").click().should(\"have.text\", \"1489449610\");",
              "err": {},
              "uuid": "1b735904-9216-4958-ac95-97ebc3962b1d",
              "parentUUID": "cce381c9-c906-47aa-8cb1-c84f66954322",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() matches depending on arguments",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() matches depending on arguments",
              "timedOut": null,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nvar greeter = {\n  /**\n   * Greets a person\n   * @param {string} name\n   */\n  greet: function greet(name) {\n    return \"Hello, \".concat(name, \"!\");\n  }\n};\ncy.stub(greeter, \"greet\").callThrough() // if you want non-matched calls to call the real method\n.withArgs(Cypress.sinon.match.string).returns(\"Hi\").withArgs(Cypress.sinon.match.number)[\"throws\"](new Error(\"Invalid name\"));\nexpect(greeter.greet(\"World\")).to.equal(\"Hi\"); // @ts-ignore\nexpect(function () {\n  return greeter.greet(42);\n}).to[\"throw\"](\"Invalid name\");\nexpect(greeter.greet).to.have.been.calledTwice; // non-matched calls goes the actual method\n// @ts-ignore\nexpect(greeter.greet()).to.equal(\"Hello, undefined!\");",
              "err": {},
              "uuid": "670d4f33-7e89-49ff-9da9-87a769ad9a87",
              "parentUUID": "cce381c9-c906-47aa-8cb1-c84f66954322",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "matches call arguments using Sinon matchers",
              "fullTitle": "Spies, Stubs, and Clock matches call arguments using Sinon matchers",
              "timedOut": null,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nvar calculator = {\n  /**\n   * returns the sum of two arguments\n   * @param a {number}\n   * @param b {number}\n   */\n  add: function add(a, b) {\n    return a + b;\n  }\n};\nvar spy = cy.spy(calculator, \"add\").as(\"add\");\nexpect(calculator.add(2, 3)).to.equal(5); // if we want to assert the exact values used during the call\nexpect(spy).to.be.calledWith(2, 3); // let's confirm \"add\" method was called with two numbers\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match.number); // alternatively, provide the value to match\nexpect(spy).to.be.calledWith(Cypress.sinon.match(2), Cypress.sinon.match(3)); // match any value\nexpect(spy).to.be.calledWith(Cypress.sinon.match.any, 3); // match any value from a list\nexpect(spy).to.be.calledWith(Cypress.sinon.match[\"in\"]([1, 2, 3]), 3);\n/**\n * Returns true if the given number is event\n * @param {number} x\n */\nvar isEven = function isEven(x) {\n  return x % 2 === 0;\n}; // expect the value to pass a custom predicate function\n// the second argument to \"sinon.match(predicate, message)\" is\n// shown if the predicate does not pass and assertion fails\n\nexpect(spy).to.be.calledWith(Cypress.sinon.match(isEven, \"isEven\"), 3);\n/**\n * Returns a function that checks if a given number is larger than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\nvar isGreaterThan = function isGreaterThan(limit) {\n  return function (x) {\n    return x > limit;\n  };\n};\n/**\n * Returns a function that checks if a given number is less than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\n\nvar isLessThan = function isLessThan(limit) {\n  return function (x) {\n    return x < limit;\n  };\n}; // you can combine several matchers using \"and\", \"or\"\n\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(2), \"> 2\").and(Cypress.sinon.match(isLessThan(4), \"< 4\")));\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(200), \"> 200\").or(Cypress.sinon.match(3))); // matchers can be used from BDD assertions\ncy.get(\"@add\").should(\"have.been.calledWith\", Cypress.sinon.match.number, Cypress.sinon.match(3)); // you can alias matchers for shorter test code\nvar M = Cypress.sinon.match;\ncy.get(\"@add\").should(\"have.been.calledWith\", M.number, M(3));",
              "err": {},
              "uuid": "ca5d5c2d-e824-45fb-bdf0-3d1109fc4013",
              "parentUUID": "cce381c9-c906-47aa-8cb1-c84f66954322",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "053f76f5-18c0-4cec-9d40-cab26c540c51",
            "65f9593f-f408-4f44-a602-40afd441501f",
            "81614d50-3944-49f5-ad7d-e891b6aa79b0",
            "dda64991-3587-4811-8dad-fda04cb99016",
            "1b735904-9216-4958-ac95-97ebc3962b1d",
            "670d4f33-7e89-49ff-9da9-87a769ad9a87",
            "ca5d5c2d-e824-45fb-bdf0-3d1109fc4013"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3630,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}